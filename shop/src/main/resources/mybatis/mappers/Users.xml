<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.mapper.UserMapper">

	<!-- 
		<ResultMap> *** 권장하진 않음
			- 컬럼이름과 값을 저장하는 객체의 프로퍼티명(멤버변수명)을 매핑시킨다.
			- 주요 속성
				1) type: 조회결과를 저장할 클래스의 전체 이름
				2) id: 식별자를 지정한다.
			- 주요 태그
				1) <id>
					- 특정 컬럼값을 멤버변수에 매핑시킨다.
					- 기본키 컬럼
				2) <result>
					- 특정 컬럼값을 멤버변수에 매핑시킨다.
					- 기본키 컬럼을 제외한 나머지 컬럼
	 -->
	<resultMap type="com.example.vo.User" id="UserResultMap"> <!-- id속성은 단순 식별자 -->
		<id column="user_no" property="no"/>
		<result column="user_id" property="id"/>
		<result column="user_password" property="password"/>
		<result column="user_name" property="name"/>
		<result column="user_tel" property="tel"/>
		<result column="user_email" property="email"/>
		<result column="user_birth" property="birth"/>
		<result column="user_deleted" property="deleted"/>
		<result column="user_created_date" property="createdDate"/>
		<result column="user_updated_date" property="updatedDate"/>
	</resultMap>

	<insert id="insertUser" parameterType="com.example.vo.User">
		<!-- 
			selectKey를 통해 insert문 실행 전에 시퀀스 조회해서 증가된 시퀀스 번호를 획득하고,
			파라미터타입에 명시되어 있는 객체(vo.User)의 프로퍼티를 keyProperty="no"으로 받아와서 int 타입으로 반환
			==> insert문에서 #{no}로 사용 가능
		 -->
		<selectKey keyProperty="no" resultType="int" order="BEFORE">
			select
				users_seq.nextval
			from
				dual
		</selectKey>
		
		insert into shop_users
		(user_no, user_id, user_password, user_name, user_email, user_tel, user_birth)
		values
		(#{no}, #{id}, #{password}, #{name}, #{email}, #{tel}, #{birth})
	</insert>
	
	<update id="updateUser" parameterType="com.example.vo.User">
		update shop_users
		set
			<if test="password != null">     <!-- password가 null이 아니면 -->
				user_password = #{password}, <!-- password를 바꿀 수 있도록 -->
			</if>
			<if test="email != null">
				user_email = #{email},
			</if>
			<if test="tel != null">
				user_tel = #{tel},
			</if>
			<if test="deleted != null">
				user_deleted = #{deleted},
			</if>
			user_updated_date = sysdate
		where
			user_no = #{no}
	</update>
	
	<select id="getUserById" parameterType="string" resultMap="UserResultMap">
		select
			*
		from
			shop_users
		where
			user_id = #{value}
	</select>
	
	<select id="getUserByEmail" parameterType="string" resultMap="UserResultMap">
		select
			*
		from
			shop_users
		where
			user_email = #{value}
	
	</select>
	
	<select id="getUserByNo" parameterType="int" resultMap="UserResultMap">
		select
			*
		from
			shop_users
		where
			user_no = #{value}
	
	</select>
	
	<select id="getAllUsers" resultMap="UserResultMap">
		select
			*
		from
			shop_users
		order by
			user_id asc
	</select>

</mapper>